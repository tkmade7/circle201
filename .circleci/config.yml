version: 2.1

# Executors definition
executors:
  sbt_executor:
    parameters:
      RUBY_VERSION:
        type: string
        default: 2.4.1
    docker:
      - image: circleci/ruby:<< parameters.RUBY_VERSION >>
    working_directory: ~/repo
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb

commands:
  compile_test:
    description: "Manage dependency cache with compile and test"
    steps:
      - run: |
          echo "Value of image_name is $image_name"
          echo "Value of regression_status is $regression_status"
          if [[ -z "$image_name" ]]; then
             echo "image_name is null, exiting"
             circleci-agent step halt
          else
             echo 'export regression_status=true' >> $BASH_ENV
             echo "BASH_ENV=$BASH_ENV"
             source $BASH_ENV
             echo "After export regression_status = $regression_status"
          fi


  check_env_vars:
    description: "check and print the environment vars"
    parameters:
      image_name:
        type: string
      env:
        type: string
      AWS_ACCESS_KEY_ID: 
        type: env_var_name
        default: CI_VAR_KEY
      AWS_SECRET_ACCESS_KEY: 
        type: env_var_name
        default: CI_VAR_SECRET
      AWS_DEFAULT_REGION:
        type: env_var_name
        default: CI_VAR_REGION
    steps:
      - run: |
          echo "image_name=$image_name"
          echo "environ=$environ"
          if [[ -z "$environ" ]]; then
             echo "environ is null, exiting"
             circleci-agent step halt
          elif [ "$environ" = "ci" ]; then
             echo "ENV_ACCESS_KEY=$ENV_ACCESS_KEY"
             echo "ENV_SECRET_KEY=$ENV_SECRET_KEY"
             echo "ENV_REGION=$ENV_REGION"
             echo 'export ENV_ACCESS_KEY=${CI_VAR_KEY}' >> $BASH_ENV
             echo 'export ENV_SECRET_KEY=${CI_VAR_SECRET}' >> $BASH_ENV
             echo 'export ENV_REGION=${CI_VAR_REGION}' >> $BASH_ENV
             source $BASH_ENV
             echo "ENV_ACCESS_KEY=$ENV_ACCESS_KEY"
             echo "ENV_SECRET_KEY=$ENV_SECRET_KEY"
             echo "ENV_REGION=$ENV_REGION"
          elif [ "$environ" = "qa" ]; then
             echo "ENV_ACCESS_KEY=$ENV_ACCESS_KEY"
             echo "ENV_SECRET_KEY=$ENV_SECRET_KEY"
             echo "ENV_REGION=$ENV_REGION"
             echo 'export ENV_ACCESS_KEY=${QA_VAR_KEY}' >> $BASH_ENV
             echo 'export ENV_SECRET_KEY=${QA_VAR_SECRET}' >> $BASH_ENV
             echo 'export ENV_REGION=${QA_VAR_REGION}' >> $BASH_ENV
             source $BASH_ENV
             echo "ENV_ACCESS_KEY=$ENV_ACCESS_KEY"
             echo "ENV_SECRET_KEY=$ENV_SECRET_KEY"
             echo "ENV_REGION=$ENV_REGION"
          fi


jobs:
  build_test_deploy:
    parameters:
      REG_CHECK:
        type: env_var_name
        default: regression_status
      image_name:
        type: string
      environ:
        type: string
    environment:
      ENV_ACCESS_KEY: ""
      ENV_SECRET_KEY: ""
      ENV_REGION: ""
    executor: sbt_executor
    steps:
      - checkout
      - check_env_vars
      - compile_test
      - run: echo "after next REG_CHECK = ${<< parameters.REG_CHECK >>}"
      - when:
          condition: << parameters.REG_CHECK >>
          steps:
            - setup_remote_docker



workflows:
  version: 2.1
  build:
    jobs:
      - build_test_deploy:
          image_name: circle201
          environ: ci
          context: ers-rafa-ci
          filters:
            branches:
              only: master

      - build_test_deploy:
          image_name: circle201
          environ: qa
          context: ers-rafa-qa
          filters:
            branches:
              only: qa
